getwd()
setwd("/Users/xiao/data")
data<-read.csv("Ref1.2ms")
getwd()
data<-read.csv("Ref1.2ms.txt")
str(data)
View(data)
fileURL<- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
getwd()
download.file(fileURL, destfile = "./data/Quizz4Q4GDP.csv", method="curl")
setwd("/Users/xiao")
download.file(fileURL, destfile = "./data/Quizz4Q4GDP.csv", method="curl")
GDP<-read,csv("./data/Quizz4Q4GDP.csv")
GDP<-read.csv("./data/Quizz4Q4GDP.csv")
dim(GDP)
str(GDP)
fileURL<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv "
download(fileURL, destfile = "./data/Quizz4EDU.csv", method="curl")
download.file(fileURL, destfile = "./data/Quizz4EDU.csv", method="curl")
EDU<- read.csv("./data/Quizz4EDU.csv")
View(GDP)
View(EDU)
names(EDU)
str(EDU)
GDP<-read.csv("./data/Quizz4Q4GDP.csv", stringsAsFactors =FALSE)
EDU<- read.csv("./data/Quizz4EDU.csv", stringsAsFactors =FALSE)
str(EDU)
str(GDP)
GDP<-read.csv("./data/Quizz4Q4GDP.csv")
str(GDP)
GDP<-read.csv("./data/Quizz4Q4GDP.csv", stringsAsFactors =FALSE)
grep("June",EDU$Special.Notes)
grep("june",EDU$Special.Notes)
grep("Fiscal year end: June",EDU$Special.Notes)
GDP2<-GDP[5:194,]
View(GDP2)
names(GDP2)[1]<-"CountryCode"
View(GDP2)
merge(GDP2,EDU, by = "CountryCode")
data<- merge(GDP2,EDU, by = "CountryCode")
View(data)
Str(data)
str(data)
grep("Fiscal year end: June",data$Special.Notes)
length(grep("Fiscal year end: June",data$Special.Notes))
install.package("quandmod")
install.packages("quandmod")
setRepositories()
1
install.packages("Quandmod")
library(quantmod)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
rm(list=ls())
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
View(amzn)
str(amzn)
a<-rownames(amzn)
a
?rowname
?rownames
?rownames(amzn)
a<-rownames(amzn)
str(a)
a
rownames(amzn)
colnames(amzn)
rm(list=ls())
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=lubridate)
this_dat<-today()
this_day<-today()
this_day
day(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment<- now()
this_moment
minute(this moment)
minute(this_moment)
ymd("1989-05-17")
my_date<- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("//192012")
dmy("1/9/2012")
ymd("1902/1/2")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment. hours =8, minute = 34, seconds =55)
update(this_moment, hours =8, minute = 34, seconds =55)
update(this_moment, hours =8, minutes = 34, seconds =55)
this_moment
update(this_moment, hours=6,minutes= 15,seconds =51)
update(this_moment, hours=10,minutes= 16,seconds =0)
update(this_moment, hours=10,minutes= 16,seconds =0)
this_moment<-update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
?now
nyc<-now("America/New_York")
nyc
depart<- nyc+days(2)
depart
depart<- update(depart,hours = 17, minutes =34)
depart
arrive<- depart + hours(15) + minutes(50)
?with_tz()
with_tz(arrive, tzone="HK")
with_tz(arrive, tzone="HKT")
info()
with_tz(arrive, tzone="Asia/Hong_Kong")
with_tz(arrive, tzone="HKT")
skip()
arrive<- with_tz(arrive, tzone="Asia/Hong_Kong")
arrive
last_time<-mdy("June 17, 2008",tz ="Singapore")
last_time
?new_interval()
?new_interval
how_long<- new_interval(last_time,arrive, tzone=attr(last_time,"SGT"))
how_long<- new_interval(last_time,arrive)
as.period(how_long)
stopwatch()
View(amzn)
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
View(amzn)
str(amzn)
rownames(amsn)
rownames(amzn)
?rowname
class(amzn)
index(amzn)
a<-index(amzn)
str(a)
b<-ymd(a)
b
str(b)
str(a)
c<-b[which(month(b)==2012),]
c<-b[which(month(b)=="2012"),]
test<-a(1)
test<-a[1]
test
month(test = 2012)
month(test) ="2012"
test
is.logical(month(test)=2012)
is.logic(month(test)=2012)
?is.logic
is.logical(1=2)
is.logical(1==2)
?is.logical
is.logical("1=2")
month(test)
months(test)
test<-b[1]
months(test)
test
years(test)
year(test)
month(test)
is.logical(year(test)=2012)
is.logical(year(test)="2012")
is.logical(year(test)=="2012")
d<-year(test)
class(d)
is.logical(year(test)=2012)
is.logical(d=2012)
is.logical("year(test)=2012"")
is.logical("year(test)=2012")
is.logical("year(test)=2012")
c<-b[which("year(b)=2012"),]
c<-b[which(year(b)=2012),]
?.indexyear
?getSymbols
getSymbols("SPY")
SPY[.indexyear(SPY)==2012]
b['2012-01/2012/12']
b[.indexmon(b) %in% c(5,6,7)]
t<- b[.indexmon(b) %in% c(5,6,7)]
t
b["/2012"]
b
b[2177]
class(c)
class(b)
amzn["/2012"]
test<-amzn['2012-01/2012/12']
test
dim(test)
test<-amz["/2012"]
test<-amzn["/2012"]
head(test)
tail(test)
dim(test)
test2<-test["2012/"]
dim(test2)
test2
dim(test2)
wdays(test2)
wday(test2)
a<-wday(test2)
class(q)
class(a)
a2<-a["a=2"]
a2
class(a)
str(a)
a(2)
a[2]
a[which(a=2)]
a[which("a=2")]
a[which(a==2)]
a2<- a[which(a==2)]
length(a2)
length(a([which(a==2)]))
length(a[which(a==2)])
test<-amzn["2012-01-01/2012-03-31"]
dim(test)
test<-amzn["2012-01-01/2012-12-30"]
dim(test)
test<-amzn["2012-01-01/2012-12-31"]
dim(test)
?par
install.packages("dplyr")
library(vcd)
install.packages("vcd")
library(vcd)
counts<- table(Arthritis$Improved)
View(Arthritis)
str(Arthristis)
str(Arthritis)
plot(Arthritis$Improved, xlab="Improved",ylab="Frequency")
?plot
hist(Arthritis$Improved)
hist(counts)
barplot(counts, main="Simple Bar PLot", xlab="Improvement", ylab="Frequency")
barplot(counts, main="Horizontal Bar Plor", xlab="Frequency", ylab="Improvement", horiz=TRUE)
Arthritis$Improved <-as.numeric(Arthristis$Improved)
Arthritis$Improved <-as.numeric(Arthritis$Improved)
hist(Arthritis$Improved)
Arthritis$Improved <-as.factor(Arthritis$Improved)
plot(Arthritis$Improved)
barplot(counts, main="Horizontal Bar Plor", xlab="Frequency", ylab="Improvement", horiz=TRUE)
Arthritis$Improved <-as.numeric(Arthritis$Improved)
barplot(counts, main="Simple Bar PLot", xlab="Improvement", ylab="Frequency")
barplot(counts, main="Horizontal Bar Plor", xlab="Frequency", ylab="Improvement", horiz=TRUE)
plot(Arthritis$Improved)
rm(list=ls)
rm(list=ls())
Str(Arthritsi)
str(Arthritis)
plot(Arthritis$Improved)
counts<-table(Arthritis$Improved, Arthritis$Treatment)
counts
barplot(counts)
barplot(counts, col=c("red","yellow","green", legend= rownames(counts)))
barplot(counts, col=c("red","yellow","green"), legend= rownames(counts)))
barplot(counts, col=c("red","yellow","green"), legend= rownames(counts))
barplot(counts)
barplot(counts, col=c("red","yellow","green"), legend= rownames(counts))
barplot(counts, col=c("red","yellow","green"), legend= rownames(counts), beside= TRUE)
barplot(counts, col=c("red","yellow","green"), legend("topright",rownames(counts)) )
barplot(counts, col=c("red","yellow","green"), legend("topright") )
barplot(counts, col=c("red","yellow","green"), legend= topright)
barplot(counts, col=c("red","yellow","green"), legend= "topright"")
barplot(counts, col=c("red","yellow","green"), legend= "topright")
?barplot
barplot(counts, col=c("red","yellow","green"), legend= rownames(counts), args.legend="topleft")
barplot(counts, col=c("red","yellow","green"), legend= rownames(counts), args.legend="topright")
barplot(counts, col=c("red","yellow","green"), legend= rownames(counts), args.legend= "topright, inset =0.05")
barplot(counts, col=c("red","yellow","green"), legend= rownames(counts), args.legend= "topleft, inset =0.05")
barplot(counts, col=c("red","yellow","green"), legend= rownames(counts), args.legend= "inset =0.05")
barplot(counts, col=c("red","yellow","green"), legend= rownames(counts), args.legend= "inset =0.5")
?legend
barplot(counts, col=c("red","yellow","green"), legend= rownames(counts), args.legend= 0.5)
barplot(counts, col=c("red","yellow","green"), legend= rownames(counts), args.legend= 1)
barplot(counts, col=c("red","yellow","green"), legend= rownames(counts), args.legend= "1")
barplot(counts, col=c("red","yellow","green"), legend= rownames(counts), args.legend= "1,2")
barplot(counts, col=c("red","yellow","green"), legend= rownames(counts), args.legend= c(1,2))
barplot(counts, col=c("red","yellow","green"), legend= rownames(counts), args.legend= 5
barplot(counts, col=c("red","yellow","green"), legend= rownames(counts), args.legend= 5
barplot(counts, col=c("red","yellow","green"), legend= rownames(counts), args.legend=5)
barplot(counts, col=c("red","yellow","green"), legend= rownames(counts), args.legend="5")
View(Grouped)
View(Loaded)
setwd("/Users/xiao/RepData_PeerAssessment1")
Loaded<- read.csv("activity.csv")
Grouped<- group_by(Loaded, date)
library(dplyr)
library(ggplot2)
library(dplyr)
Grouped<- group_by(Loaded, date)
View(Loaded)
steps_ave<- summarize(Grouped, Mean_EachDay = mean(steps, na.rm = TRUE))
mutate(Grouped, steps_ave)
str(steps_ave)
View(steps_ave)
group_by
?summarize
Grouped<- group_by(Loaded, interval)
steps_ave<- summarize(Grouped, Mean_interval = mean(steps, na.rm = TRUE))
View(steps_ave)
?merge
data<- merge(Loaded,steps_ave, by = "interval" )
View(data)
data<-data[sort(data$date),]
View(data)
data_original <-data
data[is.na(data$steps)] <- data$Mean_interval
index<-data[is.na(data$steps)]
index<-data[is.na(data$steps),]
index
View(index)
index<-is.na(data$steps)
View(index)
?if
if (is.na(data$steps) == "TRUE"){data$steps<- Mean_inteval}
if(is.na(data$steps) == "TRUE"){data$steps<- Mean_inteval}
names(daat)
names(data)
?sapply
for i<-1:length(data$stesps)
if (is.na(data$steps[i]) == "TRUE"){data$steps[i]<- Mean_inteval[i] }
i<-1:length(data$stesps)
if (is.na(data$steps[i]) == "TRUE"){data$steps[i]<- Mean_inteval[i] }
i<-1:length(data$stesps)
if (is.na(data$steps[i]) == "TRUE"){data$steps[i]<- data$Mean_inteval[i] }
i
length(data$stesps)
str(data$steps)
length(data$stesps)
dim(data$steps)
length(data$steps)
i<-1:length(data$steps)
i
if (is.na(data$steps[i]) == "TRUE"){data$steps[i]<- data$Mean_inteval[i] }
if (is.na(data$steps[i]) == "TRUE"){data$steps[i]<- data$Mean_interval[i] }
for (i<-1:length(data$steps)){
if (is.na(data$steps[i]) == "TRUE"){data$steps[i]<- data$Mean_interval[i] }
}
for (i in 1:length(data$steps)){
if (is.na(data$steps[i]) == "TRUE"){data$steps[i]<- data$Mean_interval[i] }
}
View(data2)
View(data_original)
View(data)
Grouped_date<- group_by(data, date)
steps_total<- summarize(Grouped_date, sum(steps))
ggplot(data=steps_total, aes(steps_total$sum)) + geom_histogram()
summary(steps_total$sum)
is.na(data$steps[288])
is.na(data$steps[289])
is.na(data_original$steps[289])
is.na(data_original$steps[288])
data<-data_original
for (i in 1:length(data$steps)){
if (is.na(data$steps[i]) == "TRUE"){data$steps[i]<- data$Mean_interval[i] }
}
View(data)
Grouped_date<- group_by(data, date)
steps_total2<- summarize(Grouped_date, sum(steps))
ggplot(data=steps_total, aes(steps_total2$sum)) + geom_histogram()
summary(steps_total2$sum)
View(Grouped_date)
head(Grouped_date)
tail(Grouped_date)
Grouped<- group_by(Loaded, date)
steps_total<- summarize(Grouped, sum(steps))
ggplot(data=steps_total, aes(steps_total$sum)) + geom_histogram()
Grouped_interval<- group_by(Loaded, interval)
steps_ave<- summarize(Grouped_interval, Mean_interval = mean(steps, na.rm = TRUE))
data<- merge(Loaded,steps_ave, by = "interval" )
for (i in 1:length(data$steps)){
if (is.na(data$steps[i]) == "TRUE"){data$steps[i]<- data$Mean_interval[i] }
}
Grouped_date<- group_by(data, date)
steps_total2<- summarize(Grouped_date, sum(steps))
ggplot(data=steps_total, aes(steps_total2$sum)) + geom_histogram()
summary(steps_total2$sum)
Vew(Loaded)
View(Loaded)
?weekdays
date
d<-Loaded$date
weekdays(d)
class(d)
as.date
as.Date
?as.Date
?as.R> as.
?as.POSIXct
?strptime
Laoded$date<-as.POSIXct(strptime(Loaded$date, "%Y-%m-%d"))
Loaded$date<-as.POSIXct(strptime(Loaded$date, "%Y-%m-%d"))
str(Loaded)
View(Loaded)
weekdays(Loaded$date(1:10))
weekdays(Loaded$date[1:10]
weekdays(Loaded$date[1]
weekdays(Loaded$date[1])
?Weekdays
?weekdays
Loaded<-mutate(Loaded, weekday= weekdays(date))
View(Loaded)
NewData<- Loadeds
for (i in 1:length(Loaded$date)){
if (NewData$weekday == "Saturday" | NewData$weekday == "Sunday"){NewData$weekday[i]<-"Weekends"}
else{NewData$weekday[i]<-"Weekdays"}
}
NewData<- Loaded
for (i in 1:length(Loaded$date)){
if (NewData$weekday == "Saturday" | NewData$weekday == "Sunday"){NewData$weekday[i]<-"Weekends"}
else{NewData$weekday[i]<-"Weekdays"}
}
View(NewData)
Loaded$weekday[2000]
NewData$weekday[2000]
NewData<- Loaded
for (i in 1:length(Loaded$date)){
if (NewData$weekday = "Saturday" | NewData$weekday = "Sunday"){NewData$weekday[i]<-"Weekends"}
else{NewData$weekday[i]<-"Weekdays"}
}
for (i in 1:length(Loaded$date)){
if (NewData$weekday == "Saturday" | NewData$weekday == "Sunday"){NewData$weekday[i]<-"Weekends"}
else{NewData$weekday[i]<-"Weekdays"}
}
NewData<- Loaded
for (i in 1:length(Loaded$date)){
if (NewData$weekday[i] == "Saturday" | NewData$weekday[i] == "Sunday"){NewData$weekday[i]<-"Weekends"}
else{NewData$weekday[i]<-"Weekdays"}
}
NewData$weekday[2000]
Loaded$weekday[2000]
NewData$weekday[2100]
Loaded$weekday[21900]
Loaded$weekday[1900]
Loaded$weekday[1800]
Loaded$weekday[1700]
NewData$weekday[1700]
str(NewData)
Newdata$weekday<-as.factor(NewData$weekday)
NewData$weekday<-as.factor(NewData$weekday)
str(NewData)
?group_by
?geom_line
?geom_point
View(NewData)
table(Grouped_interval2)
Grouped_interval2<- group_by(NewData, interval,weekday)
table(Grouped_interval2)
View(table(Grouped_interval2<- group_by(NewData, interval,weekday)))
data$date<-as.POSIXct(strptime(data$date, "%Y-%m-%d"))
# create a factor varaible of two levels: weekday and weekend
# asign each row to either level accordingly
data<-mutate(data, weekday= weekdays(date))
for (i in 1:length(Loaded$date)){
if (data$weekday[i] == "Saturday" | data$weekday[i] == "Sunday"){data$weekday[i]<-"Weekends"}
else{data$weekday[i]<-"Weekdays"}
}
data$weekday<-as.factor(data$weekday)
View(data)
weekdays(data$datw[1])
weekdays(data$date[1])
weekdays(data$date[3])
weekdays(data$date[10])
weekdays(data$date[11])
weekdays(data$date[12])
weekdayData<-data[which(data$weekday == "Weekdays"),]
weekendData<-data[which(data$weekday == "Weekends"),]
Grouped_weekday<- group_by(weekdayData, interval)
Grouped_weekend<- group_by(weekendData, interval)
WeekdayStepsAve<- summarize(Grouped_weekday, m2 = mean(steps, na.rm = TRUE))
WeekendStepsAve<- summarize(Grouped_weekend, m3 = mean(steps, na.rm = TRUE))
?par
par(mfrow = c(2,2))
par(mfrow = c(1,2))
plot(WeekdayStepsAve$interval, WeekdayStepsAve$m2,type="l",xlab="Interval (sec)",ylab="Average number of steps")
plot(WeekendStepsAve$interval, WeekendStepsAve$m3,type="l",xlab="Interval (sec)",ylab="Average number of steps")
par(mfrow = c(2,1))
plot(WeekdayStepsAve$interval, WeekdayStepsAve$m2,type="l",xlab="Interval (sec)",ylab="Average number of steps")
plot(WeekendStepsAve$interval, WeekendStepsAve$m3,type="l",xlab="Interval (sec)",ylab="Average number of steps")
plot(WeekdayStepsAve$interval, WeekdayStepsAve$m2,type="l",xlab="Interval (sec)",ylab="Average number of steps")
plot(WeekendStepsAve$interval, WeekendStepsAve$m3,type="l",xlab="Interval (sec)",ylab="Average number of steps")
par(mfrow=c(2,1),mar=c(4,4,2,1))
plot(WeekdayStepsAve$interval, WeekdayStepsAve$m2,type="l",xlab="Interval (sec)",ylab="Average number of steps")
plot(WeekendStepsAve$interval, WeekendStepsAve$m3,type="l",xlab="Interval (sec)",ylab="Average number of steps")
par(mfrow=c(2,1),mar=c(4,4,2,1))
plot(WeekdayStepsAve$interval, WeekdayStepsAve$m2,type="l",xlab="Interval (sec)",ylab="Average steps",title ="Weekday")
plot(WeekendStepsAve$interval, WeekendStepsAve$m3,type="l",xlab="Interval (sec)",ylab="Average steps", title = "Weekend")
par(mfrow=c(2,1),mar=c(4,4,2,1))
plot(WeekdayStepsAve$interval, WeekdayStepsAve$m2,type="l",xlab="Interval (sec)",ylab="Average steps",main ="Weekday")
plot(WeekendStepsAve$interval, WeekendStepsAve$m3,type="l",xlab="Interval (sec)",ylab="Average steps", main = "Weekend")
View(Loded)
View(Loaded)
